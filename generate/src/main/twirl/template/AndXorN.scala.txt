@import andxor.syntax._

@(tpes: List[String])

import andxor.types._
import scalaz.{@{(List("Monoid") ::: tpes.foldLen01(List[String]())(List("\\/"))).mkString(", ")}}

trait AndXor@{tpes.length}[@{tpes.axoTpeParams}] extends @{tpes.andxorParent} {
  type Prod[F[_]] = @{tpes.prodTpe}
  object Prod {
    def apply[F[_]](p: @{tpes.prodK("F")}): Prod[F] = @{tpes.prodTpe}(p)
  }

  type Cop[F[_]] = @{tpes.copTpe}
  object Cop {
    def apply[F[_]](c: @{tpes.djK("F")}): Cop[F] = @{tpes.copTpe}(c)
  }

  object evidence extends AndXorEvidence[Cop, Prod] {
    implicit def injEv[F[_]](implicit d: DerivingCop[Cop, F, Inj[Cop[F], ?]]): Inj[Cop[F], Cop[F]] = choose[Inj[Cop[F], ?], F]
    implicit def liftEv[F[_]](implicit M: Monoid[Prod[F]], d: DerivingProd[Prod, F, Inj[Prod[F], ?]]): Inj[Prod[F], Prod[F]] = divide[Inj[Prod[F], ?], F]
  }
}

object AndXor@{tpes.length} {
  def apply[@{tpes.axoTpeParams}]: AndXor@{tpes.length}[@{tpes.tpeParams}] =
    new AndXor@{tpes.length}[@{tpes.tpeParams}] {}
}
