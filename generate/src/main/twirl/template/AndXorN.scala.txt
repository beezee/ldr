@import andxor.syntax._

@(tpes: List[String])

import andxor.types.{@{tpes.copName}, @{tpes.prodName}, @{tpes.tcDepsName}}
import scala.annotation.tailrec
import scalaz.{Apply, Functor, PlusEmpty, Monoid@{tpes.foldLen01("")(", \\/, -\\/, \\/-")}, ~>}
import scalaz.Id.Id
import scalaz.std.vector._

trait AndXor@{tpes.length}[@{tpes.tpeParams}] extends AndXor {
  type Prod[F[_]] = @{tpes.prodTpe}
  object Prod { def apply[F[_]](p: @{tpes.prodK("F")}): Prod[F] = @{tpes.prodTpe}(p) }

  type Cop[F[_]] = @{tpes.copTpe}
  object Cop { def apply[F[_]](c: @{tpes.djK("F")}): Cop[F] = @{tpes.copTpe}(c) }

  type TCDeps[TC[_], F[_]] = @{tpes.tcDepsTpe()}

  @*
  def combineId[G[_]](implicit @@scalaz.unused ev: F[_] =:= Id[_], @{tpes.foldLen0("a0: G[Unit]")(tpes.paramSig("G", "a"))}): ComposeAndXor[G, @{tpes.copTpeF("Id")}, @{tpes.prodTpeF("Id")}] =
    AndXor@{tpes.length}[@{tpes.tpeParams}].combine[G]
  *@

  def mkChoose[TC[_], F[_], B](f: B => Cop[F])(implicit d: Decidable[TC], tcs: TCDeps[TC, F]): TC[B] =
    @tpes.foldLen01("d.contramap(tcs.a0)(f(_).run)")(s"Combine.choose${tpes.length}(${tpes.params("tcs.a")})(f(_).run)")

  def mkAlt[TC[_], F[_], B](f: Cop[F] => B)(implicit a: Alt[TC], tcs: TCDeps[TC, F]): TC[B] =
    @tpes.foldLen01("a.map(tcs.a0)(x => f(Cop(x)))")(s"Combine.altly${tpes.length}(${tpes.params("tcs.a")})(x => f(Cop(x)))")

  def mkDivide[TC[_], F[_], B](f: B => Prod[F])(implicit d: Divide[TC], tcs: TCDeps[TC, F]): TC[B] =
    @tpes.foldLen01("d.contramap(tcs.a0)(f(_).run)")(s"Combine.divide${tpes.length}(${tpes.params("tcs.a")})(f(_).run)")

  def mkApply[TC[_], F[_], B](f: Prod[F] => B)(implicit a: Apply[TC], tcs: TCDeps[TC, F]): TC[B] =
    @tpes.foldLen01[Any]("a.map(tcs.a0)(x => f(Prod(x)))") {
    Combine.apply@{tpes.length}(@{tpes.params("tcs.a")}) {
      case @{tpes.paramList("i").mkTuple} =>
        f(Prod(@{tpes.paramList("i").mkTuple}))
    }
    }

  object evidence extends AndXorEvidence[Cop, Prod] {
    implicit def injEv[F[_]]: Inj[Cop[F], Cop[F]] = choose[Inj[Cop[F], ?], F]
    implicit def liftEv[F[_]](implicit M: Monoid[Prod[F]]): Inj[Prod[F], Prod[F]] = divide[Inj[Prod[F], ?], F]
    implicit def injCopToProdEv[F[_]](implicit M: Monoid[Prod[F]]): Inj[Prod[F], Cop[F]] = choose[Inj[Prod[F], ?], F]
    implicit def injProdToVecCopEv[F[_]]: Inj[Vector[Cop[F]], Prod[F]] = divide[Inj[Vector[Cop[F]], ?], F]
  }

  def transformP[F[_], G[_]](nt: (F ~> G)): Prod[F] => Prod[G] =
    (p: Prod[F]) => Prod[G](@{tpes.zipWithIndex.map(x => s"nt(p${tpes.prodAccess(x._2 + 1)})").mkTuple})

  def transformC[F[_], G[_]](nt: (F ~> G)): Cop[F] => Cop[G] =
    (c: Cop[F]) => Cop[G](@{tpes.foldLen01("nt(c.run)")(
      s"c.run${tpes.drop(1).foldRight("nt(_)")((_, a) => s"_.bimap(nt(_), $a)").tail}")})

  // format: off
  def sequenceP[F[_]](p: Prod[F])(implicit A: Apply[F]): F[Prod[Id]] =
    A.map(@{tpes.paramListF(i => s"p${tpes.prodAccess(i)}", 1).tail.foldLeft(
      s"""\n    A.map(p${tpes.prodAccess(1)})(${tpes.paramList("i").zip(tpes).map(t => s"(${t._1}: ${t._2})").mkString(" => ")} =>\n      ${tpes.paramList("i").mkTuple})""")(
        (a, e) => s"\n    A.ap($e)($a)")})(Prod[Id](_))

  def sequenceC[F[_]](cop: Cop[F])(implicit FF: Functor[F]): F[Cop[Id]] =
    cop.run match {
      @{tpes.zipper(SequenceC(_)).mkString("      ").trim}
    }

  def extractC[F[_], B](c: Cop[F])(implicit inj: Inj[Option[B], Cop[F]]): Option[B] = inj(c)

  def extractP[F[_], B](p: Prod[F])(implicit inj: Inj[B, Prod[F]]): B = inj(p)

  def foldMap[G[_], C](p: Prod[G])(map: Cop[Id] => C)(implicit O: Ordering[Cop[Id]], M: Monoid[C], PE: PlusEmpty[G], U: Uncons[G]): C = {
    import scala.collection.mutable.{PriorityQueue => PQ}

    def uncons(p: Prod[G]): (List[Cop[Id]], Prod[G]) = {
      @{1.to(tpes.length).toList.map(i => s"val ht$i = U(p${tpes.prodAccess(i)})").mkString("\n      ")}
      (List(@{tpes.zip(Stream.from(1)).map(t => s"ht${t._2}._1.map(injId(_: ${t._1}))").mkString(", ")}).flatten,
        Prod[G](@{1.to(tpes.length).toList.map(i => s"ht$i._2").mkTuple}))
    }

    @@tailrec
    def appendAll(out: C, q: PQ[Cop[Id]]): C =
      q.isEmpty match {
        case true => out
        case false =>
          val newOut = M.append(out, map(q.dequeue))
          appendAll(newOut, q)
      }

    @@tailrec
    def go(prod: Prod[G], q: PQ[Cop[Id]], out: C): C =
      (prod.run.==(@{tpes.map(t => s"PE.empty[${t}]").mkTuple})) match {
        case true => appendAll(out, q)
        case false => q.isEmpty match @{s"""{
          case true => {
            val (hs, ts) = uncons(prod)
            q ++= hs
            go(ts, q, out)
          }
          case false => q.dequeue.run match {
            ${tpes.zipper(FoldMap(_)).mkString("").dropWhile(_ == ' ')}
          }
        }"""}
      }
    val Q = new PQ[Cop[Id]]()(O)
    val (hs, ts) = uncons(p)
    Q ++= hs
    go(ts, Q, M.zero)
  }
  // format: on
}

object AndXor@{tpes.length} {
  def apply[@{tpes.tpeParams}]: AndXor@{tpes.length}[@{tpes.tpeParams}] =
    new AndXor@{tpes.length}[@{tpes.tpeParams}] {}
}
