@import andxor.syntax._
@import scalaz.Zipper
@import scalaz.syntax.std.boolean._

@(z: Zipper[String], prod: Boolean)

  def map@{z.index + 1}[B](f: @{prod.fold(s"F[${z.focus}]", z.focus)} => @{prod.fold(s"F[B]", "B")}): @{prod.fold((_: LS).prodTpe, (_: LS).prod)(z.modify(_ => "B").toList)} =
    @z.wrapProdOrTuple(prod)(s"mapN.map${z.index + 1}(${prod.fold("run", "p")})(f)")

  def mapAt[B](f: @{prod.fold(s"F[${z.focus}]", z.focus)} => @{prod.fold(s"F[B]", "B")})@{Some(z.lefts.toList).filter(_.nonEmpty).fold("")(
    _ => z.dummyImpl(prod))}: @{prod.fold((_: LS).prodTpe, (_: LS).prod)(z.modify(_ => "B").toList)} =
    @z.wrapProdOrTuple(prod)(s"mapN.map${prod.fold("At(f)(run)", s"${z.index + 1}(p)(f)")}")
