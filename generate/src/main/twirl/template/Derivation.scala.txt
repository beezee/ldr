@import andxor.syntax._

@(tpeLists: List[List[String]])

import scalaz.Apply
import scalaz.Isomorphism.<=>

object derivation {
  @tpeLists.map { tpes =>
  trait Derivation@{tpes.length}P[F[_], @{tpes.tpeParams}] {
    val axo = AndXorK@{tpes.length}[F, @{tpes.tpeParams}]

    def deriveCovariant[TC[_], A](iso: A <=> axo.Prod)(implicit F: Apply[TC], @{tpes.paramSig(List("TC", "F"), "a")}): TC[A] =
      F.map(axo.combine[TC].apply)(iso.from(_))

    def deriveContravariant[TC[_], A](iso: A <=> axo.Prod)(implicit F: Divide[TC], @{tpes.paramSig(List("TC", "F"), "a")}): TC[A] =
      F.contramap(axo.combine[TC].divide)(iso.to(_))
  }
  }

  object syntax {
    @tpeLists.map { tpes =>
    implicit class Derivation@{tpes.length}POps[A, F[_], @{tpes.tpeParams}](iso: A <=> AndXorK@{tpes.length}[F, @{tpes.tpeParams}]#Prod) {
      val derive = new Derivation@{tpes.length}P[F, @{tpes.tpeParams}] {}

      def deriveCovariant[TC[_]](implicit F: Apply[TC], @{tpes.paramSig(List("TC", "F"), "a")}): TC[A] =
        derive.deriveCovariant[TC, A](iso)

      def deriveContravariant[TC[_]](implicit F: Divide[TC], @{tpes.paramSig(List("TC", "F"), "a")}): TC[A] =
        derive.deriveContravariant[TC, A](iso)
    }
    }
  }
}
