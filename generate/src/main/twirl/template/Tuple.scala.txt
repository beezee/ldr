@import andxor.syntax._

@(tpesList: List[List[String]])

import scalaz.Monoid

package object tuple {
  @tpesList.map { tpes =>
    implicit def tuple@{tpes.length}Monoid[@{tpes.prod}](implicit @{tpes.paramSig("Monoid", "m")}): Monoid[(@{tpes.prod})] =
      new Monoid[(@{tpes.prod})] {
        type T = (@{tpes.prod})
        def zero: T = (@{tpes.paramList("m").map(m => s"$m.zero").mkString(", ")})
        def append(t1: T, t2: => T): T = (@{tpes.paramList("m").zipWithIndex.map(t => s"${t._1}.append(t1._${t._2 + 1}, t2._${t._2 + 1})").mkString(", ")})
      }
  }
}
