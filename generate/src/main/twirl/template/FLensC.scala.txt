@import andxor.syntax._
@import scalaz.Zipper

@(z: Zipper[String])
@tpes = @{ z.toList }
@aT = @{ tpes.selCop(Some("F"))(z.index) }

implicit def @{tpes.copName}PLens@{z.index}[F[_], @{tpes.rank2TpeParams}]: FPLens[@{tpes.copTpeF("?[_]")}, @{tpes(z.index)}, F] =
  PLens(c => @tpes.foldLen01 { () => Some(StoreT.store[@{aT}, @{tpes.copTpe}](c.run)(y => @{tpes.copTpe}(@z.djVal("y")))) } { () => c.run match {
    case @z.djVal("x") => Some(StoreT.store[@{aT}, @{tpes.copTpe}](x)(y => @{tpes.copTpe}(@z.djVal("y"))))
    case _ => None
  } }())
