@import andxor.syntax._
@import scalaz.Zipper

@(z: Zipper[String], isId: Boolean)
@tpes = @{ z.toList }
@aT = { F[@z.focus] }

@if(isId) {
  implicit def @{tpes.prodName}Lens@{z.index}Id[@{tpes.tpeParams}]: Lens[@tpes.prodTpeF("Id"), @{z.focus}] =
    @{tpes.prodName}Lens@{z.index}[Id, @{tpes.tpeParams}]
} else {
  implicit def @{tpes.prodName}Lens@{z.index}[F[_], @{tpes.tpeParams}]: Lens[@tpes.prodTpe, F[@z.focus]] =
    Lens(p => StoreT.store[@{aT}, @{tpes.prodTpe}](p@{tpes.prodAccess(z.index + 1)})(x =>
      @{tpes.prodTpe}(@{z.prodAccesses("p").updated(z.index, "x").mkTuple})))
}
