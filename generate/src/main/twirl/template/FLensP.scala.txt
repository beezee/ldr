@import andxor.syntax._
@import scalaz.Zipper
@import scalaz.syntax.std.boolean._

@(z: Zipper[String], rank2: Boolean)
@tpes = @{ z.toList }
@aT = @{ rank2.fold(tpes.selProd(Some("F"))(z.index), s"F[${z.focus}]") }
@prodTpe = @{ rank2.fold(tpes, tpes.const).prodTpe }

    implicit def @{tpes.prodName}Lens@{z.index}@{rank2.fold("Rank2", "")}[F[_], @{rank2.fold(tpes.rank2TpeParams, tpes.tpeParams)}]: Lens[@{prodTpe}, @{aT}] =
      Lens(p => StoreT.store[@{aT}, @{prodTpe}](p@{tpes.prodAccess(z.index + 1)})(x =>
        @{prodTpe}(@{z.prodAccesses("p").updated(z.index, "x").mkTuple})))
