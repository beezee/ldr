@import andxor.syntax._
@import scalaz.Zipper

@(z: Zipper[String])
@tpes = @{ z.toList }
@aT = @{ tpes.selProd(Some("F"))(z.index) }

implicit def @{tpes.prodName}Lens@{z.index}[F[_], @{tpes.rank2TpeParams}]: FLens[@{tpes.prodTpeF("?[_]")}, @{tpes(z.index)}, F] =
  Lens(p => StoreT.store[@{aT}, @{tpes.prodTpe}](p@{tpes.prodAccess(z.index + 1)})(x =>
    @{tpes.prodTpe}(@{z.prodAccesses("p").updated(z.index, "x").mkTuple})))
