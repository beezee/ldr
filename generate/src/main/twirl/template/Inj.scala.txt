@import andxor.syntax._
@import scalaz.Zipper

@(z: Zipper[String])

  implicit def prisma@{z.index}[F[_]]: Prism[CopT[F], F[@{z.focus}]] = new Prism[CopT[F], F[@{z.focus}]] {
    def getOption(c: CopT[F]): Option[F[@{z.focus}]] = c.run match {
      case @z.djVal("x") => Some(x)
      case _ => None
    }
    def reverseGet(x: F[@{z.focus}]): CopT[F] = CopT(@z.djVal("x"))
  }

  implicit def inja@{z.index}[F[_]]: Inj[CopT[F], F[@{z.focus}]] = Inj.instance(prisma@{z.index}.reverseGet(_))
  implicit def inja@{z.index}Inverse[F[_]]: Inj[Option[F[@{z.focus}]], CopT[F]] = Inj.instance(prisma@{z.index}.getOption(_))
