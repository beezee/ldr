@import andxor.syntax._
@import scalaz.Zipper

@(z: Zipper[String])

  def map@{z.index + 1}[B](c: @{z.toList.dj})(f: @{z.focus} => B): @{z.modify(_ => "B").toList.dj} =
    c@{z.lefts.foldRight(Some(z).filterNot(_.atEnd).fold(
      "f")(_ => "_.leftMap(f)"))((_, a) => s"_.map(${a})").tail}

  def mapAt[B](f: @{z.focus} => B)(c: @{z.toList.dj})@{Some(z.lefts.toList).filter(_.nonEmpty).fold("")(
    l => s"(implicit ${l.map(_ => "DummyImplicit").paramSig("d")})")}: @{z.modify(_ => "B").toList.dj} =
    map@{z.index + 1}(c)(f)
