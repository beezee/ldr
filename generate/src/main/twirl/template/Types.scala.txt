@import andxor.syntax._

@(tpeLists: List[List[String]])

import io.estatico.newtype.macros.newtype
import scalaz.{\/, -\/, \/-, InvariantFunctor, Monoid}
import scalaz.Id.Id

object types {
  private val MF = InvariantFunctor[Monoid]
  @tpeLists.map { tpes =>
  @@newtype case class @{tpes.prodTpeDef}(run: @{tpes.prodK("F")})
  trait @{tpes.prodName}LP {
    implicit def @{tpes.prodName}Monoid[F[_], @{tpes.tpeParams}](implicit M: Monoid[@{tpes.prodK("F")}]): Monoid[@{tpes.prodTpe}] =
      MF.xmap(M, @{tpes.prodTpe}(_), (_: @{tpes.prodTpe}).run)

    @tpes.zipper(template.txt.Lift(_, false).toString.trim).mkString("\n\n    ")
  }
  object @{tpes.prodName} extends @{tpes.prodName}LP {
    @tpes.zipper(template.txt.Lift(_, true).toString.trim).mkString("\n\n    ")
  }

  @@newtype case class @{tpes.copTpeDef}(run: @{tpes.djK("F")})
  trait @{tpes.copName}LP {
    @tpes.zipper(template.txt.Inj(_, false).toString.trim).mkString("\n\n    ")
  }
  object @{tpes.copName} extends @{tpes.copName}LP {
    @tpes.zipper(template.txt.Inj(_, true).toString.trim).mkString("\n\n    ")
  }
  }
}
