@import andxor.syntax._

@()

import scalaz.Id.Id
import scalaz.Monoid

trait AndXorEvidence[Cop[_[_]], Prod[_[_]]] {
  implicit def injEv[F[_]]: Inj[Cop[F], Cop[F]]
  implicit def liftEv[F[_]](implicit M: Monoid[Prod[F]]): Inj[Prod[F], Prod[F]]
}

trait AndXor {
  type Cop[F[_]]
  type Prod[F[_]]

  val evidence: AndXorEvidence[Cop, Prod]

  def inj[F[_], A](a: A)(implicit inj: Inj[Cop[F], A]): Cop[F] = inj(a)
  def injId[A](a: A)(implicit inj: Inj[Cop[Id], Id[A]]): Cop[Id] = inj(a)
  def lift[F[_], A](a: A)(implicit inj: Inj[Prod[F], A]): Prod[F] = inj(a)
  def liftId[A](a: A)(implicit inj: Inj[Prod[Id], Id[A]]): Prod[Id] = inj(a)
  def extractC[F[_], B](c: Cop[F])(implicit inj: Inj[Option[F[B]], Cop[F]]): Option[F[B]] = inj(c)
  def extractP[F[_], B](p: Prod[F])(implicit inj: Inj[F[B], Prod[F]]): F[B] = inj(p)
}

trait AndXorLift[A] { type AXO <: AndXor }
trait AndXorLiftLP {
  implicit def lp[A]: AndXorLift.Aux[A, AndXor1[A]] = new AndXorLift[A] { type AXO = AndXor1[A] }
}
object AndXorLift extends AndXorLiftLP {
  type Aux[A, AXO0] = AndXorLift[A] { type AXO = AXO0 }

  implicit def hp[A <: AndXor]: AndXorLift.Aux[A, A] = new AndXorLift[A] { type AXO = A }
}

object AndXor {
  def build[A]: AndXor1[A] = AndXor1[A]
  @mkTpeList(2, 22).map(template.txt.Build(_).toString.trim).mkString("\n")
}
