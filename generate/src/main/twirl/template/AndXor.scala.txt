@(tpeLists: List[List[String]])

import scalaz.{Apply, Lens, Monoid, PLens}
import scalaz.Id.Id

trait AndXorEvidence[Cop[_[_]], Prod[_[_]]] {
  implicit def injEv[F[_]]: FInj[Cop, Cop, F]
  implicit def liftEv[F[_]](implicit M: Monoid[Prod[F]]): FInj[Prod, Prod, F]
  implicit def injCopToProdEv[F[_]](implicit M: Monoid[Prod[F]]): FInj[Prod, Cop, F]

  implicit def injProdToVecCopEvHelper[A[_[_]], F[_]](implicit i: FInj[Cop, A, F]): FInj[Lambda[f[_] => Vector[Cop[f]]], A, F] =
    Inj.instance(a => Vector(i(a)))
  implicit def injProdToVecCopEv[F[_]]: FInj[Lambda[f[_] => Vector[Cop[f]]], Prod, F]
}

trait AndXorDeriving[TC[_], Cop, Prod] {
  def mkChoose[B](f: B => Cop)(implicit d: Decidable[TC]): TC[B]
  def mkAlt[B](f: Cop => B)(implicit a: Alt[TC]): TC[B]
  def mkDivide[B](f: B => Prod)(implicit a: Divide[TC]): TC[B]
  def mkApply[B](f: Prod => B)(implicit a: Apply[TC]): TC[B]

  def choose(implicit d: Decidable[TC]): TC[Cop] = mkChoose(identity _)
  def alt(implicit a: Alt[TC]): TC[Cop] = mkAlt(identity _)
  def divide(implicit d: Divide[TC]): TC[Prod] = mkDivide(identity _)
  def apply(implicit a: Apply[TC]): TC[Prod] = mkApply(identity _)
}

trait AndXor { self =>
  type Cop[F[_]]
  type Prod[F[_]]

  val evidence: AndXorEvidence[Cop, Prod]

  def fix[F[_]]: AndXorFixed[F] = new AndXorFixed[F] {
    type AXO = self.type
    val axo: self.type = self
    val evidence: AndXorEvidence[self.Cop, self.Prod] = self.evidence
  }

  def inj[F[_], A](a: A)(implicit inj: Inj[Cop[F], A]): Cop[F] = inj(a)
  def injId[A](a: A)(implicit inj: Inj[Cop[Id], Id[A]]): Cop[Id] = inj(a)
  def lift[F[_], A](a: A)(implicit inj: Inj[Prod[F], A]): Prod[F] = inj(a)
  def liftId[A](a: A)(implicit inj: Inj[Prod[Id], Id[A]]): Prod[Id] = inj(a)
  def extractC[F[_], B](c: Cop[F])(implicit l: PLens[Cop[F], B]): Option[B] = l.get(c)
  def extractP[F[_], B](p: Prod[F])(implicit l: Lens[Prod[F], B]): B = l.get(p)

  def derivingNested[TC[_], F[_]](implicit dc: DerivingCop[Cop, F, TC], dp: DerivingProd[Prod, F, TC]): AndXorDeriving[TC, Cop[F], Prod[F]] =
    new AndXorDeriving[TC, Cop[F], Prod[F]] {
      def mkChoose[B](f: B => Cop[F])(implicit d: Decidable[TC]): TC[B] = dc.mkChoose(f)
      def mkAlt[B](f: Cop[F] => B)(implicit a: Alt[TC]): TC[B] = dc.mkAlt(f)
      def mkDivide[B](f: B => Prod[F])(implicit a: Divide[TC]): TC[B] = dp.mkDivide(f)
      def mkApply[B](f: Prod[F] => B)(implicit a: Apply[TC]): TC[B] = dp.mkApply(f)
    }
}

trait AndXorFixed[F[_]] {
  type AXO <: AndXor
  val axo: AXO

  type Cop = axo.Cop[F]
  type Prod = axo.Prod[F]

  val evidence: AndXorEvidence[axo.Cop, axo.Prod]

  def inj[A](a: A)(implicit inj: Inj[Cop, A]): Cop = inj(a)
  def lift[A](a: A)(implicit inj: Inj[Prod, A]): Prod = inj(a)
  def extractC[B](c: Cop)(implicit l: PLens[Cop, B]): Option[B] = l.get(c)
  def extractP[B](p: Prod)(implicit l: Lens[Prod, B]): B = l.get(p)
}

object AndXor {
  def build[A]: AndXor1[A] = new AndXor1[A] {}
  def buildNested[A[_[_]]]: AndXorNested1[A] = new AndXorNested1[A] {}
  @tpeLists.map(template.txt.Build(_).toString.trim).mkString("\n")
}
